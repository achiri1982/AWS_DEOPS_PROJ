/* groovylint-disable MethodReturnTypeRequired, NoDef */
pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        AWS_DEFAULT_REGION    = 'us-east-1'
        BACKEND_BUCKET        = 'demomy-s3-bucket'
        TF_HOME               = tool('terraform')
        TF_IN_AUTOMATION      = 'TRUE'
        TF_LOG                = 'INFO'
        PATH                  = "$TF_HOME:$PATH"
    }

    parameters {
        string(name: 'version', defaultValue: '', description: 'Version variable to pass to Terraform')
        choice(
            name: 'Action',
            choices: ['Build', 'Destroy'],
            description: 'The action to take'
        )
        choice(
            name: 'Colour',
            choices: ['Blue', 'Green'],
            description: 'The environment to use'
        )
    }

stages {
        stage('terraform format check') {
            steps{
                sh 'terraform fmt'
            }
        }
        stage('terraform Init') {
            steps{
                sh 'terraform init'
            }
        }
        stage('terraform apply') {
            steps{
                sh 'terraform apply --auto-approve'
            }
        }
    }
    post {
        always {
            echo 'Deleting Directory!'
            deleteDir()
        }
    }
}

def terraformPlan() {
    // Setting Terraform Destroy flag
    if (params.Action == 'Destroy') {
        env.DESTROY = '-destroy'
    } else {
        env.DESTROY = ''
    }

    sh("""

        terraform plan ${env.DESTROY} -var-file=${params.Colour.toLowerCase()}.tfvars -no-color -out=tfout
    """)
}

def terraformApply() {
    sh('''

        terraform apply tfout -no-color
        mkdir ../../Inspec/files/
        terraform output --json > ../../Inspec/files/output.json
    ''')
}

